{"ast":null,"code":"var _jsxFileName = \"F:\\\\SE FD BD MAD\\\\React\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Default credentials (in real app, this would be from backend)\n  const defaultCredentials = {\n    username: \"admin\",\n    password: \"admin123\"\n  };\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem(\"authToken\");\n    const userData = localStorage.getItem(\"userData\");\n    if (token && userData) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n  const login = (username, password) => {\n    // Simple authentication (in real app, this would be API call)\n    if (username === defaultCredentials.username && password === defaultCredentials.password) {\n      const token = btoa(`${username}:${password}:${Date.now()}`);\n      const userData = {\n        username: username,\n        role: \"admin\",\n        loginTime: new Date().toISOString()\n      };\n      localStorage.setItem(\"authToken\", token);\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\n      setIsAuthenticated(true);\n      setUser(userData);\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false,\n        error: \"Invalid username or password\"\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"userData\");\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","defaultCredentials","username","password","token","localStorage","getItem","userData","JSON","parse","login","btoa","Date","now","role","loginTime","toISOString","setItem","stringify","success","error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/SE FD BD MAD/React/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Default credentials (in real app, this would be from backend)\r\n  const defaultCredentials = {\r\n    username: \"admin\",\r\n    password: \"admin123\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const userData = localStorage.getItem(\"userData\");\r\n    if (token && userData) {\r\n      setIsAuthenticated(true);\r\n      setUser(JSON.parse(userData));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = (username, password) => {\r\n    // Simple authentication (in real app, this would be API call)\r\n    if (\r\n      username === defaultCredentials.username &&\r\n      password === defaultCredentials.password\r\n    ) {\r\n      const token = btoa(`${username}:${password}:${Date.now()}`);\r\n      const userData = {\r\n        username: username,\r\n        role: \"admin\",\r\n        loginTime: new Date().toISOString(),\r\n      };\r\n\r\n      localStorage.setItem(\"authToken\", token);\r\n      localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n      setIsAuthenticated(true);\r\n      setUser(userData);\r\n      return { success: true };\r\n    } else {\r\n      return { success: false, error: \"Invalid username or password\" };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"authToken\");\r\n    localStorage.removeItem(\"userData\");\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}